package com.kajun258456357159.gps.task.model;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;

import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;

import com.kajun258456357159.gps.task.vo.CategoryVO;
import com.kajun258456357159.gps.task.vo.CoordinateVO;
import com.kajun258456357159.gps.task.vo.LocationCategoryVO;
import com.kajun258456357159.gps.task.vo.LocationNameVO;
import com.kajun258456357159.gps.task.vo.LocationVO;
import com.kajun258456357159.gps.task.vo.TaskListItemVO;
import com.kajun258456357159.gps.task.vo.TaskNameVO;
import com.kajun258456357159.gps.task.vo.TaskVO;

public class DataModel implements LocationListener{
	static final String TAG = "DbHelper";
	private DbHelper dbHelper;
	private ArrayList<CategoryVO> categoryTable;
	private ArrayList<LocationCategoryVO> locationCategoryTable;
	private ArrayList<LocationNameVO> locationNameTable;
	private ArrayList<LocationVO> locationTable;
	private ArrayList<TaskNameVO> taskNameTable;
	private ArrayList<TaskVO> taskTable;
	private ArrayList<LocationCategoryVO> locationCategoryList;
	private ArrayList<LocationVO> locationList;
	private ArrayList<TaskListItemVO> taskList;
	private LocationManager locationManager;
	private static Location location;
	Context context;
	
	
	
	//Constructor
	public DataModel(Context context){
		setTaskTable(dbHelper.loadTable(new TaskVO()));
		setTaskNameTable(dbHelper.loadTable(new TaskNameVO()));
		taskList = generateTaskList();
		new loadTables().execute();
		context = this.context;
		locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, Long.valueOf(1000), 0, this);
}
	
	public void saveTask(TaskVO task){
		dbHelper.writeRecord(task);
	}
	
	public ArrayList<TaskListItemVO> updateTaskLocation(ArrayList<TaskListItemVO> taskList){
		//check to see if the database tables have been loaded
		if(categoryTable.size()==0 | locationCategoryTable.size()==0 | locationNameTable.size()==0 | locationTable.size()==0){
			ArrayList<LocationVO> sortedLocationList = getLocationList();
			Collections.sort(sortedLocationList, new LocationVO());
			
			for(int i =0; i<taskList.size()-1; i++){
				TaskListItemVO taskItem = taskList.get(i);
				taskList.set(i, taskItem);
			}
		}
		return taskList;
	}
	
	public ArrayList<LocationCategoryVO> generateTaskCategoryList(ArrayList<TaskListItemVO> taskList){
		ArrayList<LocationCategoryVO> locationCategoryList = getLocationCategoryTable();
		for(int i =0; i<taskList.size()-1; i++){
			for(int j = 0; j<locationCategoryList.size(); j++){
				if(taskList.get(i).get_categoryId()!=locationCategoryList.get(j).get_categoryId()){
					locationCategoryList.remove(j);
					j--;
				}
			}
		}
		return locationCategoryList;
	}
	
	public ArrayList<LocationVO> generateTaskLocationList(ArrayList<LocationCategoryVO> locationCategoryList){
		ArrayList<LocationVO> locationList = getLocationTable();
		for(int i = 0; i<locationCategoryList.size(); i++){
			for(int j = 0;j<locationList.size(); j++){
				if(locationCategoryList.get(i).get_locationNameId()!=locationList.get(j).get_locationName().get_id()){
					locationList.remove(j);
					j--;
				}
			}
		}
		return locationList;
	}
	
	
	public ArrayList<TaskListItemVO> generateTaskList(){
		ArrayList<TaskVO> rawTaskList = getTaskTable();
		TaskVO task = new TaskVO();
		
		ArrayList<TaskNameVO> rawTaskNameList = getTaskNameTable();
		TaskNameVO taskName = new TaskNameVO();
		
		ArrayList<TaskListItemVO> taskList = new ArrayList<TaskListItemVO>();
		for(int i =0; i<rawTaskList.size()-1; i++){
			//check to see if the task has been marked completed by boolean original day or if the completion date is prior to today
			//changing this > to >= would clear todays tasks too
			//may need a null check on get_completionDate()
			if((rawTaskList.get(i).is_isComplete()) | (0>rawTaskList.get(i).get_completionDate().compareTo(Calendar.getInstance().getTime()))){
				rawTaskList.remove(i);
				i--;
			} else {
				task = rawTaskList.get(i);
				//search taskNameList and find the ID for the taskName. 
				taskName = rawTaskNameList.get(rawTaskNameList.indexOf(task.get_taskName().get_id()));
				//add the taskItem to the list
				//locationNameId is set to -1 and the coordinates are empty because we do not have the necesary tables loaded on the first pass
				//the updateTaskLocation function will take for of it
				taskList.add(new TaskListItemVO(task.get_id(), task.get_priority(), task.get_parentId(), task.is_isComplete(), taskName.get_name(), -1, task.get_category().get_id(), new CoordinateVO()));
			} //close if((rawTaskList.get(i).is_isComplete()) | (0>rawTaskList.get(i).get_completionDate().compareTo(Calendar.getInstance().getTime())))
		}//close for(int i =0; i<rawTaskList.size()-1; i++)
		return taskList;
	}
	
	public void sortByDistance(){
		Collections.sort(taskList, new Comparator<TaskListItemVO>() {
			@Override
			public int compare(TaskListItemVO lhs, TaskListItemVO rhs){
				
				double lat = getLocation() .getLatitude();
				double lng = getLocation().getLongitude();
				
				double lhsDistance = lhs.get_coordinates().getDistance(lat, lng);
				double rhsDistance = rhs.get_coordinates().getDistance(lat, lng);
				if (lhsDistance < rhsDistance)
					return -1;
				else if (lhsDistance > rhsDistance)
					return 1;
				else return 0;
			}
		});
	}
	
	public ArrayList<CategoryVO> getCategoryTable() {
		return categoryTable;
	}

	private void setCategoryTable(ArrayList<CategoryVO> categoryTable) {
		this.categoryTable = categoryTable;
	}

	public ArrayList<LocationCategoryVO> getLocationCategoryTable() {
		return locationCategoryTable;
	}

	private void setLocationCategoryTable(ArrayList<LocationCategoryVO> locationCategoryTable) {
		this.locationCategoryTable = locationCategoryTable;
	}

	public ArrayList<LocationNameVO> getLocationNameTable() {
		return locationNameTable;
	}

	private void setLocationNameTable(ArrayList<LocationNameVO> locationNameTable) {
		this.locationNameTable = locationNameTable;
	}

	public ArrayList<LocationVO> getLocationTable() {
		return locationTable;
	}

	private void setLocationTable(ArrayList<LocationVO> locationTable) {
		this.locationTable = locationTable;
	}

	public ArrayList<TaskNameVO> getTaskNameTable() {
		return taskNameTable;
	}

	private void setTaskNameTable(ArrayList<TaskNameVO> taskNameTable) {
		this.taskNameTable = taskNameTable;
	}

	public ArrayList<TaskVO> getTaskTable() {
		return taskTable;
	}

	private void setTaskTable(ArrayList<TaskVO> taskTable) {
		this.taskTable = taskTable;
	}

	public ArrayList<LocationVO> getLocationList() {
		return locationList;
	}

	private void setLocationList(ArrayList<LocationVO> locationList) {
		this.locationList = locationList;
	}

	public ArrayList<LocationCategoryVO> getLocationCategoryList() {
		return locationCategoryList;
	}

	private void setLocationCategoryList(ArrayList<LocationCategoryVO> locationCategoryList) {
		this.locationCategoryList = locationCategoryList;
	}

	public ArrayList<TaskListItemVO> getTaskList() {
		return taskList;
	}

	private void setTaskList(ArrayList<TaskListItemVO> taskList) {
		this.taskList = taskList;
	}

	private class loadTables extends AsyncTask<String, Integer, String>{

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			setCategoryTable(dbHelper.loadTable(new CategoryVO()));
			setLocationCategoryTable(dbHelper.loadTable(new LocationCategoryVO()));
			setLocationNameTable(dbHelper.loadTable(new LocationNameVO()));
			setLocationTable(dbHelper.loadTable(new LocationVO()));
			setLocationCategoryList(generateTaskCategoryList(taskList));
			setLocationList(generateTaskLocationList(getLocationCategoryList()));
			return null;
		}
		
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		setLocation(location);
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
		
	}

	public static Location getLocation() {
		return location;
	}

	public void setLocation(Location location) {
		this.location = location;
	}

}
