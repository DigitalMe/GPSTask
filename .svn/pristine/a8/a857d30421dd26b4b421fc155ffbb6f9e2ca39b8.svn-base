package com.kajun258456357159.gps.task;

import java.util.ArrayList;

import android.app.Activity;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.kajun258456357159.gps.task.layout.lists.TaskItem;
import com.kajun258456357159.gps.task.services.DBHelper;
import com.kajun258456357159.gps.task.vo.LocationVO;
import com.kajun258456357159.gps.task.vo.TaskListItemVO;
import com.kajun258456357159.gps.task.vo.TaskVO;



public class TaskList extends Activity{
	public final static String TASKLIST = "com.kajun258456357159.gps.task.TASKLIST";
	public final static String NAME = ".NAME";
	public final static String ID = ".ID";
	public final static String ISNEW = ".ISNEW";
	public final static int UPDATEMINDISTANCE = 50; //in meters
	private static final String TAG = "TaskList";
	private DBHelper dbHelper;
//	private LinearLayout taskRow;
	private String[] priorityColors;
	
	private LocationManager locationManager;
	private LocationVO gpsLocation;
	
//  TODO used to search task list	
	private EditText editSearchAddTask;
	private ArrayList<TaskVO> taskList;
	private ArrayList<TaskItem> taskArrayList;
//	private ArrayList<TaskListItemVO> tasksArrayList;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        Debug.startMethodTracing();
        setContentView(R.layout.activity_task_list);
        gpsLocation = new LocationVO();
        dbHelper = new DBHelper(this);
//    	tasksArrayList = new ArrayList<TaskListItemVO>();
        taskList = new ArrayList<TaskVO>();
        
		locationManager = (LocationManager)getSystemService(LOCATION_SERVICE);
       
        editSearchAddTask = (EditText)findViewById(R.id.editTasks_SearchAddTask);

		//load colors into an array
    	priorityColors = getResources().getStringArray(R.array.priorityColors);
    }
    
    public void onResume(){
    	super.onResume();
    	//load tasks
		taskList= dbHelper.loadTasks(1);
		taskArrayList = new ArrayList<TaskItem>();
    	//add a row for each task
    	LinearLayout layoutListTasks = (LinearLayout)this.findViewById(R.id.layoutListTasks);
    	layoutListTasks.removeAllViews();
    	
    	//for loop to be add each task row to the task list
//    	for (int i = 0; i<tasksArrayList.size(); i++){
//    		TaskListItemVO listTask = tasksArrayList.get(i);
//    		if (listTask.is_isComplete()){
    	for (int i = 0; i<taskList.size();i++){
    		if (taskList.get(i).is_isComplete()){
    			
    		} else {
    			TaskItem taskRow = new TaskItem(this);
    			taskRow.set_Task(taskList.get(i));
//    	    	taskRow = (LinearLayout) LayoutInflater.from(this).inflate(R.layout.task_row, null);
//    			CheckBox checkBoxTaskComplete = (CheckBox) taskRow.findViewById(R.id.checkboxTaskComplete);
//   			TextView textTaskName = (TextView) taskRow.findViewById(R.id.textRowTaskName);
//    			TextView textTaskDistance = (TextView)taskRow.findViewById(R.id.textTaskDistance);
//    			
//    			checkBoxTaskComplete.setChecked(listTask.is_isComplete());
//    			checkBoxTaskComplete.setId(Integer.valueOf(Long.toString(listTask.get_id())));
//
//    	    	textTaskName.setText(listTask.get_name().toString());
//    	    	textTaskName.setTextColor(Color.parseColor(priorityColors[listTask.get_priority()]));
//    	    	textTaskName.setId(Integer.valueOf(Long.toString(listTask.get_id())));
//
//            	if(gpsLocation.get_coordinate().get_lattitude()+gpsLocation.get_coordinate().get_longitude()!=0){
//            		ArrayList<LocationVO> taskLocationList = dbHelper.loadTaskLocations(listTask.get_categoryId());
//	            	if(taskLocationList.size() > 0){
//	            		int closestLocationIndex=0;
//	            		Float closestDistance=Float.valueOf(9999999);
//	            		Float locationDistance;
//	            		for(int x=0; x < taskLocationList.size(); x++){
//	            			locationDistance = taskLocationList.get(x).get_coordinate().getDistance(gpsLocation.get_coordinate().get_lattitude(), gpsLocation.get_coordinate().get_longitude());
//	            			if(closestDistance>locationDistance){
//	            				closestDistance=locationDistance;
//	            				closestLocationIndex=x;
//	            			}
//	            		}
//	            		String distance = String.format("%.1f", taskLocationList.get(closestLocationIndex).get_coordinate().getDistance(gpsLocation.get_coordinate().get_lattitude(), gpsLocation.get_coordinate().get_longitude())/1000);
//		            	textTaskDistance.setText(distance+"km");
//		            	textTaskDistance.setId(Integer.valueOf(String.valueOf(listTask.get_categoryId())));
//	            	}
 //           	}
 //           	textTaskDistance.setClickable(Boolean.TRUE);
    			taskArrayList.add(taskRow);
        		
            	layoutListTasks.addView(taskArrayList.get(taskArrayList.size()-1).get_taskItem(this));
    			
    		}
        	//end for loop
    	}
    }

	protected void onPause(){
		super.onPause();
		//for (int i = 0; i<taskList.size();i++){
//			((TaskItem) taskArrayList.get(i).get_taskItem(this)).onDestroy();
//		}
	}

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }
    
    public void onClickTaskName(View v) {
		Intent intent = new Intent(this, EditTasks.class);
		intent.putExtra(TASKLIST + NAME, "");
		intent.putExtra(TASKLIST + ID, Long.valueOf(v.getId()));
		intent.putExtra(TASKLIST + ISNEW, Boolean.FALSE);
		startActivity(intent);
    }

    public void onClickTaskDistance(View v) {
		if (Long.valueOf(v.getId())==0){
    	//bring to screen to notify user there are no location with this category
			Toast.makeText(this, "No locations for this task", Toast.LENGTH_SHORT).show();
		} else {
			//show location info
	    	Intent intent = new Intent(this, LocationView.class);
	    	intent.putExtra(LocationView.LOCATIONVIEW + LocationView.CATEGORYID, Long.valueOf(v.getId()));
	    	startActivity(intent);
		}
    }
    
    
	public void addTask(View view) {
				
		Intent intent = new Intent(this, EditTasks.class);
		
		editSearchAddTask = (EditText) findViewById(R.id.editTasks_SearchAddTask);
		String message = editSearchAddTask.getText().toString();
		intent.putExtra((TASKLIST + NAME), message);
		intent.putExtra(TASKLIST + ID, 0);
		intent.putExtra((TASKLIST + ISNEW), Boolean.TRUE);
		editSearchAddTask.setText("");
		startActivity(intent);
	}
	
	public void updateTask(View v){
		
    	TaskListItemVO listTask = new TaskListItemVO();
    	CheckBox checkBox = (CheckBox) v.findViewById(v.getId());
    	
		//get the id of the checkbox that was clicked
    	listTask.set_id(v.getId());
    	listTask.set_isComplete(checkBox.isChecked());
    //	Toast.makeText(this, "you selected task  " + Long.toString(listTask.get_id()), Toast.LENGTH_LONG).show();
    	
		//write the id number and checked status to db
    	dbHelper.isCompleteTaskSave(listTask);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case android.R.id.home:
			// This ID represents the Home or Up button. In the case of this
			// activity, the Up button is shown. Use NavUtils to allow users
			// to navigate up one level in the application structure. For
			// more details, see the Navigation pattern on Android Design:
			//
			// http://developer.android.com/design/patterns/navigation.html#up-vs-back
			//
			NavUtils.navigateUpFromSameTask(this);
			
			break;
		case R.id.menuEditLocations:
			startActivity(new Intent(this, SelectLocationName.class));
			break;
		case R.id.menuEditCategories:
			startActivity(new Intent(this, EditCategories.class));
			break;
		case R.id.menuSettings:
			break;
		case R.id.menuLoadPOI:
			startActivity(new Intent(this, LoadPOI.class));
			break;
		}
		return true;
	}

}